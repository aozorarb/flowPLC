!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!Ruby	mixin	/how the class or module is mixed in (mixin:HOW:MODULE)/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!Ruby	A,accessor	/accessors/
!_TAG_KIND_DESCRIPTION!Ruby	C,constant	/constants/
!_TAG_KIND_DESCRIPTION!Ruby	L,library	/libraries/
!_TAG_KIND_DESCRIPTION!Ruby	S,singletonMethod	/singleton methods/
!_TAG_KIND_DESCRIPTION!Ruby	a,alias	/aliases/
!_TAG_KIND_DESCRIPTION!Ruby	c,class	/classes/
!_TAG_KIND_DESCRIPTION!Ruby	f,method	/methods/
!_TAG_KIND_DESCRIPTION!Ruby	m,module	/modules/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!Ruby	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/Users/aozora/pcode/flowPLC/lib/flowPLC/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	//
!_TAG_ROLE_DESCRIPTION!Ruby!library	loaded	/loaded by "load" method/
!_TAG_ROLE_DESCRIPTION!Ruby!library	required	/loaded by "require" method/
!_TAG_ROLE_DESCRIPTION!Ruby!library	requiredRel	/loaded by "require_relative" method/
Array	stage.rb	/^    if Array === data && Array === data.first$/;"	C	method:Stage._show_class
BasicItem	item.rb	/^  class BasicItem$/;"	c	module:Item
DataFile	data_file.rb	/^module FlowPLC::DataFile$/;"	m	module:FlowPLC
FlowPLC	data_file.rb	/^module FlowPLC;end$/;"	m
FlowPLC	error.rb	/^module FlowPLC$/;"	m
FlowPLC	item.rb	/^module FlowPLC;end$/;"	m
FlowPLC	item_execute.rb	/^module FlowPLC; end$/;"	m
FlowPLC	stage.rb	/^module FlowPLC; end$/;"	m
FlowPLC	stage_manager.rb	/^module FlowPLC; end$/;"	m
Input	item.rb	/^  class Input < BasicItem$/;"	c	module:Item
InvalidIndex	error.rb	/^  class InvalidIndex < Exception; end$/;"	c	module:FlowPLC
Item	item.rb	/^module FlowPLC::Item$/;"	m	module:FlowPLC
ItemExecute	item_execute.rb	/^module FlowPLC::ItemExecute$/;"	m	module:FlowPLC
ItemHolder	stage_manager.rb	/^  ItemHolder = Struct.new(:item, :amount)$/;"	C	class:StageManager
NotItemError	error.rb	/^  class NotItemError < Exception; end$/;"	c	module:FlowPLC
Output	item.rb	/^  class Output < BasicItem$/;"	c	module:Item
Stage	stage.rb	/^class FlowPLC::Stage$/;"	c	module:FlowPLC
StageManager	stage_manager.rb	/^class FlowPLC::StageManager$/;"	c	module:FlowPLC
Timer	item.rb	/^  class Timer < BasicItem$/;"	c	module:Item
UnusableNameError	error.rb	/^  class UnusableNameError < Exception;end$/;"	c	module:FlowPLC
_show_class	stage.rb	/^  private def _show_class(data)$/;"	f	class:Stage
add	stage_manager.rb	/^  def add(item)$/;"	f	class:StageManager
class_initialize	item.rb	/^    def class_initialize(time)$/;"	f	class:Item.Timer
class_initialize	item.rb	/^    private def class_initialize$/;"	f	class:Item.BasicItem
consist_with_data_file	stage.rb	/^  def consist_with_data_file(stage_data)$/;"	f	class:Stage
data	stage.rb	/^  attr_reader :data$/;"	A	class:Stage
delete	stage_manager.rb	/^  def delete(item)$/;"	f	class:StageManager
delete_flow	stage.rb	/^  def delete_flow(flow_idx)$/;"	f	class:Stage
delete_item_at	stage.rb	/^  def delete_item_at(flow_idx, inflow_idx)$/;"	f	class:Stage
disable	item.rb	/^    def disable() @state = false end$/;"	f	class:Item.Output
enable	item.rb	/^    def enable() @state = true end$/;"	f	class:Item.Output
initialize	item.rb	/^    def initialize(name, *args)$/;"	f	class:Item.BasicItem
initialize	stage.rb	/^  def initialize$/;"	f	class:Stage
initialize	stage_manager.rb	/^  def initialize$/;"	f	class:StageManager
insert_item	stage.rb	/^  def insert_item(flow_idx, inflow_idx, item, item_args)$/;"	f	class:Stage
item_exec	stage.rb	/^  def item_exec(flow_idx, inflow_idx, command, *args)$/;"	f	class:Stage
load	data_file.rb	/^  def self.load(filename)$/;"	S	module:DataFile
name	item.rb	/^    attr_reader :name, :state$/;"	A	class:Item.BasicItem
name2item_class	stage.rb	/^  private def name2item_class(item_class_name, item_args)$/;"	f	class:Stage
new_flow	stage.rb	/^  def new_flow$/;"	f	class:Stage
new_flow_at	stage.rb	/^  def new_flow_at(flow_idx)$/;"	f	class:Stage
off	item.rb	/^    def off() @state = false end$/;"	f	class:Item.Input
on	item.rb	/^    def on() @state = true end$/;"	f	class:Item.Input
push_item	stage.rb	/^  def push_item(flow_idx, item, item_args)$/;"	f	class:Stage
reset	item.rb	/^    def reset$/;"	f	class:Item.Timer
run	item.rb	/^    def run$/;"	f	class:Item.Timer
run_disable_item	item_execute.rb	/^  private def run_disable_item(item)$/;"	f	module:ItemExecute
run_enable_item	item_execute.rb	/^  private def run_enable_item(item)$/;"	f	module:ItemExecute
save	data_file.rb	/^  def self.save(stage_data, filename, overwrite: false)$/;"	S	module:DataFile
show_class	stage.rb	/^  def show_class$/;"	f	class:Stage
show_detail	stage.rb	/^  def show_detail$/;"	f	class:Stage
stage=	item_execute.rb	/^  attr_writer :stage$/;"	A	module:ItemExecute
start	item.rb	/^    def start() @running = true end$/;"	f	class:Item.Timer
state	item.rb	/^    attr_reader :name, :state$/;"	A	class:Item.BasicItem
stop	item.rb	/^    def stop()  @running = false end$/;"	f	class:Item.Timer
time	item.rb	/^    attr_reader :time$/;"	A	class:Item.Timer
valid_index?	stage.rb	/^  private def valid_index?(*indexies)$/;"	f	class:Stage
