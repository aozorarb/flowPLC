!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!Ruby	mixin	/how the class or module is mixed in (mixin:HOW:MODULE)/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!Ruby	A,accessor	/accessors/
!_TAG_KIND_DESCRIPTION!Ruby	C,constant	/constants/
!_TAG_KIND_DESCRIPTION!Ruby	L,library	/libraries/
!_TAG_KIND_DESCRIPTION!Ruby	S,singletonMethod	/singleton methods/
!_TAG_KIND_DESCRIPTION!Ruby	a,alias	/aliases/
!_TAG_KIND_DESCRIPTION!Ruby	c,class	/classes/
!_TAG_KIND_DESCRIPTION!Ruby	f,method	/methods/
!_TAG_KIND_DESCRIPTION!Ruby	m,module	/modules/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!Ruby	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/Users/aozora/pcode/flowPLC/lib/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	//
!_TAG_ROLE_DESCRIPTION!Ruby!library	loaded	/loaded by "load" method/
!_TAG_ROLE_DESCRIPTION!Ruby!library	required	/loaded by "require" method/
!_TAG_ROLE_DESCRIPTION!Ruby!library	requiredRel	/loaded by "require_relative" method/
BasicItem	flowPLC/items.rb	/^  class BasicItem$/;"	c	module:Item
Core	flowPLC.rb	/^  class Core$/;"	c	module:FlowPLC
DataFile	flowPLC/stage_data_file.rb	/^class FlowPLC::Stage::DataFile$/;"	c	module:FlowPLC.Stage
FlowPLC	flowPLC.rb	/^module FlowPLC$/;"	m
IPLC	interactive_play.rb	/^class IPLC$/;"	c
Input	flowPLC/items.rb	/^  class Input < BasicItem$/;"	c	module:Item
Item	flowPLC/items.rb	/^module FlowPLC::Item$/;"	m	module:FlowPLC
Output	flowPLC/items.rb	/^  class Output < BasicItem$/;"	c	module:Item
Stage	flowPLC/stage.rb	/^class FlowPLC::Stage$/;"	c	module:FlowPLC
StageManager	flowPLC/stage_manager.rb	/^class FlowPLC::StageManager$/;"	c	module:FlowPLC
Timer	flowPLC/items.rb	/^  class Timer < BasicItem$/;"	c	module:Item
_show_class	flowPLC/stage.rb	/^  def _show_class(data)$/;"	f	class:Stage
add	flowPLC/stage_manager.rb	/^  alias :add :add?$/;"	a	class:StageManager
add?	flowPLC/stage_manager.rb	/^  def add?(item)$/;"	f	class:StageManager
add_method_completion	interactive_play.rb	/^  def add_method_completion$/;"	f	class:IPLC
add_object_methods_completion	interactive_play.rb	/^  def add_object_methods_completion(obj)$/;"	f	class:IPLC
class_initialize	flowPLC/items.rb	/^    def class_initialize$/;"	f	class:Item.BasicItem
class_initialize	flowPLC/items.rb	/^    def class_initialize(time)$/;"	f	class:Item.Timer
consist_with_stage	flowPLC/stage_manager.rb	/^  def consist_with_stage(stage_data)$/;"	f	class:StageManager
data	flowPLC/stage.rb	/^  attr_reader :data, :flow_state$/;"	A	class:Stage
delete	flowPLC/stage_manager.rb	/^  def delete(item)$/;"	f	class:StageManager
delete_at	flowPLC.rb	/^    def delete_at(idx, inflow_idx)          @stage.delete_at(idx, inflow_idx) end$/;"	f	class:FlowPLC.Core
delete_at	flowPLC/stage.rb	/^  def delete_at(flow_idx, inflow_idx)$/;"	f	class:Stage
delete_flow	flowPLC.rb	/^    def delete_flow(idx)                    @stage.delete_flow(idx) end$/;"	f	class:FlowPLC.Core
delete_flow	flowPLC/stage.rb	/^  def delete_flow(idx)$/;"	f	class:Stage
delete_item	flowPLC.rb	/^    def delete_item(name)                   @stage.delete(name) end$/;"	f	class:FlowPLC.Core
disable	flowPLC/items.rb	/^    def disable() @state = false end$/;"	f	class:Item.Output
enable	flowPLC/items.rb	/^    def enable() @state = true end$/;"	f	class:Item.Output
file_name_usable?	flowPLC/stage_data_file.rb	/^  private def file_name_usable?(file_name, exist_file_ok: false)$/;"	f	class:DataFile
finalize	interactive_play.rb	/^  def finalize$/;"	f	class:IPLC
flow_number	flowPLC/stage.rb	/^  def flow_number$/;"	f	class:Stage
flow_state	flowPLC/stage.rb	/^  attr_reader :data, :flow_state$/;"	A	class:Stage
initialize	flowPLC.rb	/^    def initialize$/;"	f	class:FlowPLC.Core
initialize	flowPLC/items.rb	/^    def initialize(name, *args)$/;"	f	class:Item.BasicItem
initialize	flowPLC/stage.rb	/^  def initialize$/;"	f	class:Stage
initialize	flowPLC/stage_data_file.rb	/^  def initialize$/;"	f	class:DataFile
initialize	flowPLC/stage_manager.rb	/^  def initialize$/;"	f	class:StageManager
initialize	interactive_play.rb	/^  def initialize$/;"	f	class:IPLC
input_loop	interactive_play.rb	/^  def input_loop$/;"	f	class:IPLC
insert	flowPLC.rb	/^    def insert(flow_idx, inflow_idx, item)  @stage.insert(flow_idx, inflow_idx, item) end$/;"	f	class:FlowPLC.Core
insert	flowPLC/stage.rb	/^  def insert(flow_idx, inflow_idx, item)$/;"	f	class:Stage
intoroduce	interactive_play.rb	/^  def intoroduce$/;"	f	class:IPLC
item_exec	flowPLC/stage.rb	/^  def item_exec(name, command)$/;"	f	class:Stage
item_exec	flowPLC/stage_manager.rb	/^  def item_exec(name, command, *args)$/;"	f	class:StageManager
item_name_at	flowPLC.rb	/^    def item_name_at(flow_idx, inflow_idx)  @stage[flow_idx][inflow_idx].name end$/;"	f	class:FlowPLC.Core
load	flowPLC.rb	/^    def load(file_name)$/;"	f	class:FlowPLC.Core
load	flowPLC/stage.rb	/^  def load(file_name)$/;"	f	class:Stage
load	flowPLC/stage_data_file.rb	/^  def self.load(file_name)$/;"	S	class:DataFile
main	interactive_play.rb	/^  def main$/;"	f	class:IPLC
manager_add	flowPLC/stage.rb	/^  def manager_add(item)$/;"	f	class:Stage
name	flowPLC/items.rb	/^    attr_reader :name, :state$/;"	A	class:Item.BasicItem
new_flow	flowPLC.rb	/^    def new_flow(item)                      @stage.new_flow(item) end$/;"	f	class:FlowPLC.Core
new_flow	flowPLC/stage.rb	/^  def new_flow(item)$/;"	f	class:Stage
off	flowPLC/items.rb	/^    def off() @state = false end$/;"	f	class:Item.Input
on	flowPLC/items.rb	/^    def on() @state = true end$/;"	f	class:Item.Input
push	flowPLC.rb	/^    def push(idx, item)                     @stage.push(idx, item) end$/;"	f	class:FlowPLC.Core
push	flowPLC/stage.rb	/^  def push(idx, item)$/;"	f	class:Stage
puts_state	flowPLC.rb	/^    def puts_state$/;"	f	class:FlowPLC.Core
puts_state_deep	flowPLC.rb	/^    def puts_state_deep$/;"	f	class:FlowPLC.Core
raise_used_name	flowPLC/stage.rb	/^  def raise_used_name(item)$/;"	f	class:Stage
reset	flowPLC/items.rb	/^    def reset$/;"	f	class:Item.Timer
run	flowPLC.rb	/^    def run$/;"	f	class:FlowPLC.Core
run	flowPLC/items.rb	/^    def run$/;"	f	class:Item.Timer
run_disable_item	flowPLC.rb	/^    def run_disable_item(item)$/;"	f	class:FlowPLC.Core
run_enable_item	flowPLC.rb	/^    def run_enable_item(item)$/;"	f	class:FlowPLC.Core
save	flowPLC.rb	/^    def save(file_name)$/;"	f	class:FlowPLC.Core
save	flowPLC/stage_data_file.rb	/^  def self.save(stage_data, file_name, overwrite: false)$/;"	S	class:DataFile
save!	flowPLC.rb	/^    def save!(file_name)$/;"	f	class:FlowPLC.Core
show_class	flowPLC/stage.rb	/^  def show_class$/;"	f	class:Stage
show_detail	flowPLC/stage.rb	/^  def show_detail$/;"	f	class:Stage
show_state	flowPLC/stage.rb	/^  def show_state$/;"	f	class:Stage
start	flowPLC/items.rb	/^    def start() @running = true end$/;"	f	class:Item.Timer
state	flowPLC/items.rb	/^    attr_reader :name, :state$/;"	A	class:Item.BasicItem
stop	flowPLC/items.rb	/^    def stop()  @running = false end$/;"	f	class:Item.Timer
time	flowPLC/items.rb	/^    attr_reader :time$/;"	A	class:Item.Timer
