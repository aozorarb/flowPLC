!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!Ruby	mixin	/how the class or module is mixed in (mixin:HOW:MODULE)/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	h,hashtag	/hashtags/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_KIND_DESCRIPTION!Ruby	A,accessor	/accessors/
!_TAG_KIND_DESCRIPTION!Ruby	C,constant	/constants/
!_TAG_KIND_DESCRIPTION!Ruby	L,library	/libraries/
!_TAG_KIND_DESCRIPTION!Ruby	S,singletonMethod	/singleton methods/
!_TAG_KIND_DESCRIPTION!Ruby	a,alias	/aliases/
!_TAG_KIND_DESCRIPTION!Ruby	c,class	/classes/
!_TAG_KIND_DESCRIPTION!Ruby	f,method	/methods/
!_TAG_KIND_DESCRIPTION!Ruby	m,module	/modules/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!Markdown	1.1	/current.age/
!_TAG_PARSER_VERSION!Ruby	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/Users/aozora/pcode/flowPLC/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	//
!_TAG_ROLE_DESCRIPTION!Ruby!library	loaded	/loaded by "load" method/
!_TAG_ROLE_DESCRIPTION!Ruby!library	required	/loaded by "require" method/
!_TAG_ROLE_DESCRIPTION!Ruby!library	requiredRel	/loaded by "require_relative" method/
BasicItem	lib/flowPLC/items.rb	/^  class BasicItem$/;"	c	module:Item
COMPLETEION_WORDS	sandbox/readline.rb	/^COMPLETEION_WORDS = ['puts', 'print', 'p', 'exit', 'quit', 'help', 'hello', 'world']$/;"	C
C_off	sandbox/background_hilight.rb	/^C_off = 0$/;"	C
C_on	sandbox/background_hilight.rb	/^C_on = 1$/;"	C
Core	lib/flowPLC.rb	/^  class Core$/;"	c	module:FlowPLC
DStage	play.rb	/^DStage = plc.instance_variable_get('@stage')$/;"	C
DStageManager	play.rb	/^DStageManager = FlowPLC::StageManager.instance_variable_get('@manager')$/;"	C
DataFile	lib/flowPLC/stage_data_file.rb	/^class FlowPLC::Stage::DataFile$/;"	c	module:FlowPLC.Stage
Enter	sandbox/menubar.rb	/^Enter = 10$/;"	C
Escape	sandbox/menubar.rb	/^Escape = 27$/;"	C
FlowPLC	lib/flowPLC.rb	/^module FlowPLC$/;"	m
HISTORY_FILE	sandbox/readline.rb	/^HISTORY_FILE = File.expand_path('~\/.ruby_history')$/;"	C
IPLC	lib/interactive_play.rb	/^class IPLC$/;"	c
Input	lib/flowPLC/items.rb	/^  class Input < BasicItem$/;"	c	module:Item
Item	lib/flowPLC/items.rb	/^module FlowPLC::Item$/;"	m	module:FlowPLC
Manager	sandbox/item_manager.rb	/^class Manager$/;"	c
Menubar	sandbox/menubar.rb	/^class Menubar$/;"	c
N	sandbox/pad.rb	/^N = 1000$/;"	C
NUM	play.rb	/^NUM = 1$/;"	C
Output	lib/flowPLC/items.rb	/^  class Output < BasicItem$/;"	c	module:Item
Reader	sandbox/item_manager.rb	/^class Reader$/;"	c
Stage	lib/flowPLC/stage.rb	/^class FlowPLC::Stage$/;"	c	module:FlowPLC
StageManager	lib/flowPLC/stage_manager.rb	/^class FlowPLC::StageManager$/;"	c	module:FlowPLC
System	sandbox/cursor_move.rb	/^class System$/;"	c	mixin:include:Curses
System	sandbox/write_and_move.rb	/^class System$/;"	c	mixin:include:Curses
Timer	lib/flowPLC/items.rb	/^  class Timer < BasicItem$/;"	c	module:Item
Writer	sandbox/item_manager.rb	/^class Writer$/;"	c
_show_class	lib/flowPLC/stage.rb	/^  def _show_class(data)$/;"	f	class:Stage
add	lib/flowPLC/stage_manager.rb	/^  alias :add :add?$/;"	a	class:StageManager
add	sandbox/item_manager.rb	/^  def add obj$/;"	f	class:Manager
add?	lib/flowPLC/stage_manager.rb	/^  def add?(item)$/;"	f	class:StageManager
add_method_completion	lib/interactive_play.rb	/^  def add_method_completion$/;"	f	class:IPLC
add_object_methods_completion	lib/interactive_play.rb	/^  def add_object_methods_completion(obj)$/;"	f	class:IPLC
class_initialize	lib/flowPLC/items.rb	/^    def class_initialize$/;"	f	class:Item.BasicItem
class_initialize	lib/flowPLC/items.rb	/^    def class_initialize(time)$/;"	f	class:Item.Timer
clear_line	sandbox/cursor_move.rb	/^  def clear_line(line_no)$/;"	f	class:System
clear_line	sandbox/write_and_move.rb	/^  def clear_line(line_no)$/;"	f	class:System
consist_with_stage	lib/flowPLC/stage_manager.rb	/^  def consist_with_stage(stage_data)$/;"	f	class:StageManager
data	lib/flowPLC/stage.rb	/^  attr_reader :data, :flow_state$/;"	A	class:Stage
delete	lib/flowPLC/stage_manager.rb	/^  def delete(item)$/;"	f	class:StageManager
delete_at	lib/flowPLC.rb	/^    def delete_at(idx, inflow_idx)          @stage.delete_at(idx, inflow_idx) end$/;"	f	class:FlowPLC.Core
delete_at	lib/flowPLC/stage.rb	/^  def delete_at(flow_idx, inflow_idx)$/;"	f	class:Stage
delete_flow	lib/flowPLC.rb	/^    def delete_flow(idx)                    @stage.delete_flow(idx) end$/;"	f	class:FlowPLC.Core
delete_flow	lib/flowPLC/stage.rb	/^  def delete_flow(idx)$/;"	f	class:Stage
delete_item	lib/flowPLC.rb	/^    def delete_item(name)                   @stage.delete(name) end$/;"	f	class:FlowPLC.Core
disable	lib/flowPLC/items.rb	/^    def disable() @state = false end$/;"	f	class:Item.Output
down	sandbox/cursor_move.rb	/^  def down() @y += 1 if (@y+1).between?(0, lines-1) end$/;"	f	class:System
down	sandbox/write_and_move.rb	/^  def down() @y += 1 if (@y+1).between?(0, lines-1) end$/;"	f	class:System
enable	lib/flowPLC/items.rb	/^    def enable() @state = true end$/;"	f	class:Item.Output
execute	sandbox/cursor_move.rb	/^  def execute$/;"	f	class:System
execute	sandbox/write_and_move.rb	/^  def execute$/;"	f	class:System
file_name_usable?	lib/flowPLC/stage_data_file.rb	/^  private def file_name_usable?(file_name, exist_file_ok: false)$/;"	f	class:DataFile
finalize	lib/interactive_play.rb	/^  def finalize$/;"	f	class:IPLC
flow_number	lib/flowPLC/stage.rb	/^  def flow_number$/;"	f	class:Stage
flow_state	lib/flowPLC/stage.rb	/^  attr_reader :data, :flow_state$/;"	A	class:Stage
foo	sandbox/item_manager.rb	/^  def foo$/;"	f	class:Reader
foo	sandbox/item_manager.rb	/^  def foo$/;"	f	class:Writer
init_curses	sandbox/menubar.rb	/^  def init_curses$/;"	f	class:Menubar
initialize	lib/flowPLC.rb	/^    def initialize$/;"	f	class:FlowPLC.Core
initialize	lib/flowPLC/items.rb	/^    def initialize(name, *args)$/;"	f	class:Item.BasicItem
initialize	lib/flowPLC/stage.rb	/^  def initialize$/;"	f	class:Stage
initialize	lib/flowPLC/stage_data_file.rb	/^  def initialize$/;"	f	class:DataFile
initialize	lib/flowPLC/stage_manager.rb	/^  def initialize$/;"	f	class:StageManager
initialize	lib/interactive_play.rb	/^  def initialize$/;"	f	class:IPLC
initialize	sandbox/cursor_move.rb	/^  def initialize$/;"	f	class:System
initialize	sandbox/item_manager.rb	/^  def initialize$/;"	f	class:Reader
initialize	sandbox/item_manager.rb	/^  def initialize$/;"	f	class:Writer
initialize	sandbox/write_and_move.rb	/^  def initialize$/;"	f	class:System
input_loop	lib/interactive_play.rb	/^  def input_loop$/;"	f	class:IPLC
insert	lib/flowPLC.rb	/^    def insert(flow_idx, inflow_idx, item)  @stage.insert(flow_idx, inflow_idx, item) end$/;"	f	class:FlowPLC.Core
insert	lib/flowPLC/stage.rb	/^  def insert(flow_idx, inflow_idx, item)$/;"	f	class:Stage
intoroduce	lib/interactive_play.rb	/^  def intoroduce$/;"	f	class:IPLC
item_exec	lib/flowPLC/stage.rb	/^  def item_exec(name, command)$/;"	f	class:Stage
item_exec	lib/flowPLC/stage_manager.rb	/^  def item_exec(name, command, *args)$/;"	f	class:StageManager
item_name_at	lib/flowPLC.rb	/^    def item_name_at(flow_idx, inflow_idx)  @stage[flow_idx][inflow_idx].name end$/;"	f	class:FlowPLC.Core
left	sandbox/cursor_move.rb	/^  def left()  @x -= 1 if (@x-1).between?(0, cols-1) end$/;"	f	class:System
left	sandbox/write_and_move.rb	/^  def left()  @x -= 1 if (@x-1).between?(0, cols-1) end$/;"	f	class:System
load	lib/flowPLC.rb	/^    def load(file_name)$/;"	f	class:FlowPLC.Core
load	lib/flowPLC/stage.rb	/^  def load(file_name)$/;"	f	class:Stage
load	lib/flowPLC/stage_data_file.rb	/^  def self.load(file_name)$/;"	S	class:DataFile
loop	sandbox/cursor_move.rb	/^  def loop$/;"	f	class:System
loop	sandbox/write_and_move.rb	/^  def loop$/;"	f	class:System
ls	sandbox/item_manager.rb	/^  def ls$/;"	f	class:Manager
main	lib/interactive_play.rb	/^  def main$/;"	f	class:IPLC
manager_add	lib/flowPLC/stage.rb	/^  def manager_add(item)$/;"	f	class:Stage
name	lib/flowPLC/items.rb	/^    attr_reader :name, :state$/;"	A	class:Item.BasicItem
new_flow	lib/flowPLC.rb	/^    def new_flow(item)                      @stage.new_flow(item) end$/;"	f	class:FlowPLC.Core
new_flow	lib/flowPLC/stage.rb	/^  def new_flow(item)$/;"	f	class:Stage
new_thread	sandbox/write_and_move.rb	/^  def new_thread(str, time: 1)$/;"	f	class:System
off	lib/flowPLC/items.rb	/^    def off() @state = false end$/;"	f	class:Item.Input
on	lib/flowPLC/items.rb	/^    def on() @state = true end$/;"	f	class:Item.Input
push	lib/flowPLC.rb	/^    def push(idx, item)                     @stage.push(idx, item) end$/;"	f	class:FlowPLC.Core
push	lib/flowPLC/stage.rb	/^  def push(idx, item)$/;"	f	class:Stage
puts_state	lib/flowPLC.rb	/^    def puts_state$/;"	f	class:FlowPLC.Core
puts_state_deep	lib/flowPLC.rb	/^    def puts_state_deep$/;"	f	class:FlowPLC.Core
raise_used_name	lib/flowPLC/stage.rb	/^  def raise_used_name(item)$/;"	f	class:Stage
reset	lib/flowPLC/items.rb	/^    def reset$/;"	f	class:Item.Timer
right	sandbox/cursor_move.rb	/^  def right() @x += 1 if (@x+1).between?(0, cols-1) end$/;"	f	class:System
right	sandbox/write_and_move.rb	/^  def right() @x += 1 if (@x+1).between?(0, cols-1) end$/;"	f	class:System
run	lib/flowPLC.rb	/^    def run$/;"	f	class:FlowPLC.Core
run	lib/flowPLC/items.rb	/^    def run$/;"	f	class:Item.Timer
run_disable_item	lib/flowPLC.rb	/^    def run_disable_item(item)$/;"	f	class:FlowPLC.Core
run_enable_item	lib/flowPLC.rb	/^    def run_enable_item(item)$/;"	f	class:FlowPLC.Core
save	lib/flowPLC.rb	/^    def save(file_name)$/;"	f	class:FlowPLC.Core
save	lib/flowPLC/stage_data_file.rb	/^  def self.save(stage_data, file_name, overwrite: false)$/;"	S	class:DataFile
save!	lib/flowPLC.rb	/^    def save!(file_name)$/;"	f	class:FlowPLC.Core
show_class	lib/flowPLC/stage.rb	/^  def show_class$/;"	f	class:Stage
show_detail	lib/flowPLC/stage.rb	/^  def show_detail$/;"	f	class:Stage
show_state	lib/flowPLC/stage.rb	/^  def show_state$/;"	f	class:Stage
start	lib/flowPLC/items.rb	/^    def start() @running = true end$/;"	f	class:Item.Timer
state	lib/flowPLC/items.rb	/^    attr_reader :name, :state$/;"	A	class:Item.BasicItem
status_bar	sandbox/cursor_move.rb	/^  def status_bar$/;"	f	class:System
status_bar	sandbox/write_and_move.rb	/^  def status_bar$/;"	f	class:System
stop	lib/flowPLC/items.rb	/^    def stop()  @running = false end$/;"	f	class:Item.Timer
time	lib/flowPLC/items.rb	/^    attr_reader :time$/;"	A	class:Item.Timer
up	sandbox/cursor_move.rb	/^  def up()   @y -= 1 if (@y-1).between?(0, lines-1) end$/;"	f	class:System
up	sandbox/write_and_move.rb	/^  def up()   @y -= 1 if (@y-1).between?(0, lines-1) end$/;"	f	class:System
write_sentence	sandbox/write_and_move.rb	/^  def write_sentence(str)$/;"	f	class:System
